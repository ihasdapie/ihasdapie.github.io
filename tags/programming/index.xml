<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on chenbrian</title>
    <link>//chenbrian.ca/tags/programming/</link>
    <description>Recent content in Programming on chenbrian</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© 2022 — Brian Chen — All rights reserved.</copyright>
    <lastBuildDate>Fri, 17 Nov 2023 00:19:22 -0800</lastBuildDate>
    <atom:link href="//chenbrian.ca/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ros2 rolling on apple silicon</title>
      <link>//chenbrian.ca/posts/ros2_m1/</link>
      <pubDate>Sat, 21 Jan 2023 18:59:53 -0500</pubDate>
      <guid>//chenbrian.ca/posts/ros2_m1/</guid>
      <description>&lt;h2 id=&#34;it-works-1&#34;&gt;It works! &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;I got a shiny new macbook and was sad that I had to dual-boot into Asahi (which is actually a surprisingly robust experience at the time of writing) to do ROS2 work. So I did the only sensible thing and spent the better part of a day making &lt;code&gt;ros2&lt;/code&gt; build on an m1 mac on MacOS Ventura.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;I&amp;rsquo;d like to report that &lt;code&gt;ros2&lt;/code&gt; runs &lt;em&gt;flawlessly&lt;/em&gt; on apple silicon with some caveats (see below).&#xA;But for most use cases it&amp;rsquo;s amazing to work with and ridiculously fast. For reference, building aUToronto&amp;rsquo;s planning stack on my old i7-8550u laptop took between 5-10 minutes, Asahi 48 seconds, and &lt;em&gt;18.5&lt;/em&gt; seconds on MacOS!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Retrospective: Internship @ Open Robotics</title>
      <link>//chenbrian.ca/posts/osrf-internship-retrospective/</link>
      <pubDate>Thu, 18 Aug 2022 01:20:00 -0700</pubDate>
      <guid>//chenbrian.ca/posts/osrf-internship-retrospective/</guid>
      <description>&lt;p&gt;I spent summer 2022 interning at &lt;a href=&#34;openrobotics.org/&#34;&gt;Open Robotics&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, a non-profit organization that spawned &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and maintains &lt;a href=&#34;https://www.ros.org/&#34;&gt;ROS, ROS2&lt;/a&gt; (&lt;strong&gt;R&lt;/strong&gt;obot &lt;strong&gt;O&lt;/strong&gt;perating &lt;strong&gt;S&lt;/strong&gt;ystem) and the &lt;a href=&#34;https://gazebosim.org/&#34;&gt;Gazebo&lt;/a&gt; simulator.&lt;/p&gt;&#xA;&lt;p&gt;Since writing up an retrospective is a lot more work than I&amp;rsquo;d like to put in right now, here&amp;rsquo;s the output of &lt;code&gt;gh search prs --involves ihasdapie -L 100&lt;/code&gt; in the relevant ros orgs, if that&amp;rsquo;s of interest.&#xA;It&amp;rsquo;s also pretty cool to see the &lt;a href=&#34;https://docs.ros.org/en/iron/Releases/Release-Iron-Irwini.html&#34;&gt;Iron Irwini Release Notes&lt;/a&gt; since I worked on a number of features there, most notably &lt;a href=&#34;https://docs.ros.org/en/iron/Releases/Release-Iron-Irwini.html#service-introspection&#34;&gt;service introspection&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>PSA: Delete `AnimationDurationFactor` if you have an old KDE installation</title>
      <link>//chenbrian.ca/posts/kwin_choppy_fix/</link>
      <pubDate>Wed, 25 May 2022 01:22:56 -0700</pubDate>
      <guid>//chenbrian.ca/posts/kwin_choppy_fix/</guid>
      <description>&lt;p&gt;As per title: Delete &lt;code&gt;AnimationDurationFactor&lt;/code&gt; from &lt;code&gt;~/.config/kwinrc&lt;/code&gt;  if you have an old installation.&#xA;This overrides the default value in kdeglobals and for me caused my animation speed to get stuck at something stupid.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bugs.kde.org/show_bug.cgi?id=431259&#34;&gt;source&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Also, this is entirely anecdotal but it appears to me that setting &lt;code&gt;KWIN_TRIPLE_BUFFER=0&lt;/code&gt; in &lt;code&gt;/etc/profile.d/kwin.sh&lt;/code&gt; to disable triple buffering results in smoother behaviour than with it on despite the typical recommendations online.&#xA;This may be because my laptop runs a Intel UHD620 and two 4K displays and the puny little integrated graphics card can&amp;rsquo;t keep up with triple buffering.&#xA;When using the MX150 on the laptop triple buffering seems to work better.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Toggling laptop touchsreen on Wayland</title>
      <link>//chenbrian.ca/posts/wayland_toggle_touchscreen/</link>
      <pubDate>Mon, 07 Feb 2022 15:23:04 -0500</pubDate>
      <guid>//chenbrian.ca/posts/wayland_toggle_touchscreen/</guid>
      <description>&lt;p&gt;Back when I was still on X11 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; , I had this little &lt;code&gt;bash&lt;/code&gt; script to toggle my touchscreen on/off, since I didn&amp;rsquo;t use it all that often except to sign the occasional PDF. And it sucked up power&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#!/usr/bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# toggles touchscreen on x11-based systems&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;isOn&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;xinput --list-props &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;SYNA2393:00 06CB:19AC&amp;#39;&lt;/span&gt; | grep &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Device Enabled&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;isOn&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;isOn&lt;/span&gt;: -1&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$isOn&lt;/span&gt; -eq &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xinput set-prop &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;SYNA2393:00 06CB:19AC&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Device Enabled&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Turning touchscreen on!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xinput set-prop &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;SYNA2393:00 06CB:19AC&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Device Enabled&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Turning Touchscreen off!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Unfortunately it doesn&amp;rsquo;t work on Wayland and there isn&amp;rsquo;t a great drop-in replacement for &lt;code&gt;xinput&lt;/code&gt; on Wayland; you would either have to mess with &lt;code&gt;udev&lt;/code&gt; or use this little script I cooked up:&lt;/p&gt;</description>
    </item>
    <item>
      <title>conway.3js</title>
      <link>//chenbrian.ca/posts/conway.3js/</link>
      <pubDate>Sat, 05 Feb 2022 22:14:08 -0500</pubDate>
      <guid>//chenbrian.ca/posts/conway.3js/</guid>
      <description>&lt;p&gt;A few weeks back one of my roommates mentioned in passing that they were thinking of writing conway&amp;rsquo;s game of life as a little widget for their website.&#xA;I thought that was pretty fun and suggested that it would be really neat if it were in 3D as well.&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;hellip; anyways fast-forward about two hours and I was stuck in a 3-hour lecture.&#xA;So I wrote it (as is pretty evident below)&lt;/p&gt;</description>
    </item>
    <item>
      <title>interfacing with a pi pico on linux</title>
      <link>//chenbrian.ca/posts/pi-pico-on-linux/</link>
      <pubDate>Thu, 27 Jan 2022 23:08:10 -0500</pubDate>
      <guid>//chenbrian.ca/posts/pi-pico-on-linux/</guid>
      <description>&lt;p&gt;Needed to use a Pi Pico for one of my courses (which mandated circuitpython &amp;hellip; for reasons unknown) and noticed that Adafruit&amp;rsquo;s documentation for using CircuitPython with something that wasn&amp;rsquo;t Mu Editor was not really up to par.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Install CircuitPython by copying &lt;code&gt;.uf2&lt;/code&gt; file into the Pi Pico, which can be done by just plugging it into your computer&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;python3 -m pip install circuitpython-stubs&lt;/code&gt; to get completions with your LSP of choice&lt;/li&gt;&#xA;&lt;li&gt;Connect to serial port to view &lt;code&gt;print&lt;/code&gt;s and logging info&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;find the appropriate port with &lt;code&gt;ls /dev/ttyACM*&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;connect using GNU &lt;code&gt;screen&lt;/code&gt; or whatever you like to use&#xA;&lt;ul&gt;&#xA;&lt;li&gt;e.x. &lt;code&gt;screen /dev/ttyACM0 115200&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;If you get a permissions error, add &lt;code&gt;sudo&lt;/code&gt; or add yourself to the appropriate group&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Writing a resume with LaTeX</title>
      <link>//chenbrian.ca/posts/latex-resume/</link>
      <pubDate>Fri, 21 Jan 2022 18:31:20 -0500</pubDate>
      <guid>//chenbrian.ca/posts/latex-resume/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s face it &amp;ndash; \( \LaTeX \)) is &lt;em&gt;unequivocally cooler&lt;/em&gt; than Word.&#xA;And you want an &lt;em&gt;unequivocally cool&lt;/em&gt; resume.&#xA;So you tried &lt;a href=&#34;https://github.com/liantze/AltaCV&#34;&gt;altacv&lt;/a&gt;, but it always got absolutely chewed up by ATS systems.&lt;/p&gt;&#xA;&lt;p&gt;And so you &lt;em&gt;yearned&lt;/em&gt; for a 🌠cool🥶 single-column layout, but you couldn&amp;rsquo;t find one.&lt;/p&gt;&#xA;&lt;p&gt;I present: my &lt;a href=&#34;https://github.com/ihasdapie/resume/&#34;&gt;fork of altacv&lt;/a&gt; with a few 🌟 &lt;strong&gt;revolutionary&lt;/strong&gt; 🌟 features.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Cut down on icons to improve pdf-to-text conversion&lt;/li&gt;&#xA;&lt;li&gt;Change to a single-column layout&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\itag{asdf}&lt;/code&gt; command to draw an inline &amp;ldquo;tag&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\chref&lt;/code&gt; command for hyperlinks&lt;/li&gt;&#xA;&lt;li&gt;Disabling word wrapping and hyphenation&lt;/li&gt;&#xA;&lt;li&gt;Various changes to &lt;code&gt;\makecvevent&lt;/code&gt;, etc. to improve pdf-to-text conversion&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;For an example of the output, see my &lt;a href=&#34;//chenbrian.ca/about/&#34;&gt;about me&lt;/a&gt; page, or the picture below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ROS2 LSP Setup</title>
      <link>//chenbrian.ca/posts/ros2_lsp_setup/</link>
      <pubDate>Tue, 04 Jan 2022 04:23:20 -0500</pubDate>
      <guid>//chenbrian.ca/posts/ros2_lsp_setup/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;TLDR: you want code completions while working with ROS2&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;lsp-with-clangd&#34;&gt;LSP with &lt;code&gt;clangd&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;ROS2 puts its headers into &lt;code&gt;/opt/ros2/&amp;lt;ROS_DISTRO&amp;gt;/include&lt;/code&gt;.&#xA;This doesn&amp;rsquo;t work out of the box with my fairly default &lt;code&gt;clangd&lt;/code&gt; setup, and it would be &lt;em&gt;too&lt;/em&gt; easy if it just worked out of the box with &lt;code&gt;vim&lt;/code&gt;!&#xA;Most editors like vscode or clion have their own way of handling scenarios like this, e.g. vscode using a &lt;code&gt;c_cpp_properties.json&lt;/code&gt; file.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;For vscode setup, see &lt;a href=&#34;https://www.allisonthackston.com/articles/vscode-docker-ros2.html&#34;&gt;this&lt;/a&gt; or &lt;a href=&#34;https://erdalpekel.de/?p=157&#34;&gt;this&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on &#39;Clean Architecture: A Craftsman&#39;s Guide to Software Structure and Design&#39;</title>
      <link>//chenbrian.ca/posts/clean-architecture-notes/</link>
      <pubDate>Sun, 26 Dec 2021 16:39:21 -0500</pubDate>
      <guid>//chenbrian.ca/posts/clean-architecture-notes/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;&amp;ldquo;Fight for the architecture&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The following is a &lt;strong&gt;Work in progress&lt;/strong&gt; collection of notes on &amp;lsquo;Clean Architecture: A Craftsman&amp;rsquo;s Guide to Software Structure and Design&amp;rsquo; by Robert C. Martin. [1]&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[1] R. C. Martin, Clean Architecture: A Craftsman’s Guide to Software Structure and Design, 1st ed. USA: Prentice Hall Press, 2017. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;paradigms&#34;&gt;Paradigms&lt;/h2&gt;&#xA;&lt;p&gt;Main paradigms:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Structured: Discipline on direct transfer of control&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dijkstra: banishing the &lt;code&gt;goto&lt;/code&gt; statement; enforcing control flow; &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; &amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;Enabling functional decomposition; applying mathematical divide-and-conquer approach to algorithms&lt;/li&gt;&#xA;&lt;li&gt;Testing can only prove a program false but not correct&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Structured programming breaks down to provable chunks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Object-oriented: Discipline on indirect transfer of control&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>//chenbrian.ca/posts/projects/</link>
      <pubDate>Mon, 13 Dec 2021 21:03:35 -0500</pubDate>
      <guid>//chenbrian.ca/posts/projects/</guid>
      <description>&lt;p&gt;// Page under construction (Actually, this page has been abandoned since early 2022&amp;hellip;) //&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;If you built a project and did not write about it, did you really build a project?&amp;rdquo;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;//chenbrian.ca/tags/projects/&#34;&gt;Browse projects by tag&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ros.org/&#34;&gt;ROS&lt;/a&gt;: Worked on the open-source Robot Operating System (ROS) as a summer intern in 2022. What was really cool about this experience was that I got to work directly with NASA on their &lt;a href=&#34;https://www.nasa.gov/viper/&#34;&gt;VIPER&lt;/a&gt; lunar rover project, supporting their use of ROS2 and Gazebo on their simulation, ground control, and autonomy systems.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ROS is essentially the &lt;a href=&#34;http://www.cse.sc.edu/~jokane/agitr/&#34;&gt;de-facto&lt;/a&gt; standard for writing robot software and can be found in Roombas, Boston Dynamic&amp;rsquo;s &lt;a href=&#34;http://wiki.ros.org/Robots/Spot&#34;&gt;spot&lt;/a&gt;, industrial robot arms, and even in &lt;a href=&#34;https://www.openrobotics.org/blog/2022/2/2/rosinspace&#34;&gt;space&lt;/a&gt;!&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#osrf-intern-presentation&#34;&gt;Intern Presentation Slides&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/3qIYnQmpa1Q?t=2501&#34;&gt;Presentation at August 2022 Gazebo Community Meeting&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ros-infrastructure/rep/pull/360&#34;&gt;REP2012: Service Introspection&lt;/a&gt;: Enabling service introspection, i.e. allowing for &lt;code&gt;ros2 service echo&lt;/code&gt; and &lt;code&gt;ros2 bag record --services&lt;/code&gt;. This highly requested feature has been absent from ROS since the introduction of ROS services in ~2011 and I&amp;rsquo;m excited to have been able to help make it a reality. See &lt;a href=&#34;https://github.com/ros2/ros2/issues/1285&#34;&gt;meta-ticket&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Lots of changes to &lt;a href=&#34;https://github.com/ros2/rcl/pull/997&#34;&gt;&lt;code&gt;rcl&lt;/code&gt;&lt;/a&gt; core ROS library and &lt;a href=&#34;https://github.com/ros2/rosidl/pull/700&#34;&gt;&lt;code&gt;rosidl&lt;/code&gt;&lt;/a&gt; (and &lt;a href=&#34;https://github.com/ros2/rosidl_typesupport/pull/127&#34;&gt;associated libs&lt;/a&gt;) code generation pipeline plus implementing support in &lt;a href=&#34;https://github.com/ros2/rclpy/pull/988&#34;&gt;&lt;code&gt;rclpy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/ros2/rclcpp/pull/1985&#34;&gt;&lt;code&gt;rclcpp&lt;/code&gt;&lt;/a&gt; client libraries and adding &lt;a href=&#34;https://github.com/ros2/ros2cli/pull/745&#34;&gt;tooling&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Helped introduce mypy compliance in rclpy, &lt;a href=&#34;https://github.com/ros2/rclpy/pull/959&#34;&gt;ParameterClient&lt;/a&gt;, fixing race conditions in certain edge cases when shutting down an &lt;code&gt;rclpy&lt;/code&gt; node, lots of miscellaneous maintenance tickets, and improving test coverage&lt;/li&gt;&#xA;&lt;li&gt;Wrote a vim plugin for the &lt;a href=&#34;http://www.alcyone.com/software/empy/&#34;&gt;empy&lt;/a&gt; templating engine: &lt;a href=&#34;https://github.com/ihasdapie/empy.vim&#34;&gt;ihasdapie/empy.vim&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.autodrive.utoronto.ca/&#34;&gt;aUToronto&lt;/a&gt;, UofT&amp;rsquo;s self-driving car team: I&amp;rsquo;ve been a part of this team since 2020 and in doing so have worn many hats. Here are some of them:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Trajectory motion planning lead: designed, implemented, and deployed local trajectory motion planning algorithms to generate kinematically feasible trajectories&lt;/li&gt;&#xA;&lt;li&gt;DLA lead, creating a inference engine to run YOLOv5 in real-time across 4 cameras with NVIDIA &lt;a href=&#34;https://github.com/NVIDIA/TensorRT/&#34;&gt;TensorRT&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Simulation &amp;amp; Testing co-lead, working on automated integration testing &amp;amp; associated ROS/ROS2 tooling Demo &lt;a href=&#34;#autotest-autoronto&#34;&gt;below&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://grocercheck.ca/&#34;&gt;GrocerCheck&lt;/a&gt;: &lt;a href=&#34;https://github.com/GrocerCheck/GrocerCheck&#34;&gt;&lt;code&gt;Github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;#grocercheck-pitch-deck&#34;&gt;Pitch Deck&lt;/a&gt;  A website to help people reduce contact at grocery stores and essential services.  Got some press coverage too!&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cbc.ca/news/canada/british-columbia/bc-youth-entrepreneurs-covid19-1.5784637&#34;&gt;CBC Piece&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ici.radio-canada.ca/nouvelle/1746337/emploi-pandemie-entrepreneuriat-bakd-grocercheck&#34;&gt;CBC Piece, but in French&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;CBC TV piece can be found &lt;a href=&#34;#grocercheck-cbc-interview&#34;&gt;below&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dailyhive.com/seattle/new-website-grocercheck-seattle&#34;&gt;Daily Hive&lt;/a&gt;: Toronto, Vancouver, Seattle&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.seattlepi.com/coronavirus/article/new-website-checks-grocery-store-crowds-capacity-15297891.php&#34;&gt;Seattle Pi&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cbmpress.com/bbs/board.php?bo_table=vnews&amp;amp;wr_id=5388&amp;amp;sst=wr_hit&amp;amp;sod=asc&amp;amp;sop=and&amp;amp;page=71&#34;&gt;CBM Press (Korean News)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.salamvancouver.com/news/vancouver-and-bc-news/grocercheck-%D8%A8%D9%87-%D8%B4%D9%85%D8%A7-%D8%A7%D9%85%DA%A9%D8%A7%D9%86-%D9%85%DB%8C-%D8%AF%D9%87%D8%AF-%D8%AA%D8%A7-%D8%A8%D8%B1-%D9%81%D8%B1%D9%88%D8%B4%DA%AF%D8%A7%D9%87-%D9%87%D8%A7%DB%8C/&#34;&gt;Salam Vancouver (Iranian News)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.fairchildtv.com/&#34;&gt;Fairchild TV&lt;/a&gt;: Interview broadcast on national Chinese TV&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/btrnt&#34;&gt;btrnt&lt;/a&gt;: &lt;code&gt;&amp;quot;Bot or not&amp;quot;&lt;/code&gt;: A chrome extension that implements &lt;a href=&#34;http://gltr.io/&#34;&gt;GLTR&lt;/a&gt; to use machine learning to detect and combat AI-generated text. Demo &lt;a href=&#34;#btrnt&#34;&gt;below&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/UTMIST/humerus&#34;&gt;The Humerus Bot&lt;/a&gt; A bot that leverages large NLP ML models to play &lt;a href=&#34;https://www.cardsagainsthumanity.com/&#34;&gt;Cards against Humanity&lt;/a&gt;, a popular humor-based card game. Demo &lt;a href=&#34;#humerus&#34;&gt;below&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://chenbrian.ca/posts/2021/12/go-web-server/&#34;&gt;gws&lt;/a&gt;: A simple web server implemented in 111 lines of &lt;code&gt;go&lt;/code&gt; used for serving my personal website. &lt;a href=&#34;https://github.com/ihasdapie/gws&#34;&gt;&lt;code&gt;Github&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ihasdapie/dotfiles&#34;&gt;dotfiles&lt;/a&gt;: Config files I spend too much time on.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/GrocerCheck/LivePopularTimes&#34;&gt;LivePopularTimes&lt;/a&gt; GrocerCheck backend data collection library&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ihasdapie/bettermotherfuckinghugowebsite/&#34;&gt;bettermotherfuckinghugowebsite&lt;/a&gt; A minimal &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt; template inspired by &lt;a href=&#34;http://bettermotherfuckingwebsite.com/&#34;&gt;http://bettermotherfuckingwebsite.com/&lt;/a&gt; &amp;ndash; now with modern conveniences.&lt;/li&gt;&#xA;&lt;li&gt;BC Parks Foundation: &amp;lsquo;discoverparks&amp;rsquo; platform currently in public alpha.&lt;/li&gt;&#xA;&lt;li&gt;And more!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;demos&#34;&gt;Demos:&lt;/h2&gt;&#xA;&lt;h4 id=&#34;osrf-intern-presentation&#34;&gt;OSRF Intern Presentation&lt;/h4&gt;&#xA;&lt;object data=&#34;osrf_intern_pres.pdf#toolbar=0&amp;navpanes=0&#34; type=&#34;application/pdf&#34; width=100% height=&#34;700px&#34;&gt;&#xA;    &lt;embed src=&#34;osrf_intern_pres.pdf&#34;&gt;&#xA;        &lt;p&gt;This browser does not support PDFs. Please download the PDF to view it: &lt;a href=&#34;osrf_intern_pres.pdf&#34;&gt;Download PDF&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code 2021</title>
      <link>//chenbrian.ca/posts/aoc2021/</link>
      <pubDate>Thu, 09 Dec 2021 21:20:53 -0500</pubDate>
      <guid>//chenbrian.ca/posts/aoc2021/</guid>
      <description>&lt;p&gt;This page will track some notes and TILs for &lt;a href=&#34;https://adventofcode.com/2021&#34;&gt;AoC2021&lt;/a&gt;, which I will be completing in &lt;code&gt;rust&lt;/code&gt; &amp;ndash; a language I am still learning.&lt;/p&gt;&#xA;&lt;p&gt;Solutions are hosted &lt;a href=&#34;https://github.com/ihasdapie/aoc2021&#34;&gt;here&lt;/a&gt;.&#xA;If a day isn&amp;rsquo;t very interesting, I won&amp;rsquo;t post a writeup for it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;day-6&#34;&gt;Day 6&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;Problem&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/ihasdapie/aoc2021/tree/main/d6&#34;&gt;Solution&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;So many lanternfish! The key to this puzzle is to represent the lanternfish as a histogram rather than creating a list of all the lanternfish. See &lt;a href=&#34;https://github.com/ihasdapie/aoc2021/tree/main/d6&#34;&gt;solution&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;day-7&#34;&gt;Day 7&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2021/day/7&#34;&gt;Problem&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/ihasdapie/aoc2021/tree/main/d7&#34;&gt;Solution&lt;/a&gt;&#xA;This was an interesting one. Find the problem &lt;a href=&#34;https://adventofcode.com/2021/day/7&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
