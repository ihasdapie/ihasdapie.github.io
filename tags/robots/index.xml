<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>robots on chenbrian</title>
    <link>//chenbrian.ca/tags/robots/</link>
    <description>Recent content in robots on chenbrian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2022 — Brian Chen — All rights reserved.</copyright>
    <lastBuildDate>Thu, 18 Aug 2022 01:20:00 -0700</lastBuildDate><atom:link href="//chenbrian.ca/tags/robots/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Retrospective: Internship @ Open Robotics</title>
      <link>//chenbrian.ca/posts/osrf-internship-retrospective/</link>
      <pubDate>Thu, 18 Aug 2022 01:20:00 -0700</pubDate>
      
      <guid>//chenbrian.ca/posts/osrf-internship-retrospective/</guid>
      <description>I spent the past summer at Open Robotics, a non-profit organization that spawned 1 and maintains ROS, ROS2 (Robot Operating System) and the Gazebo simulator. I worked as a software engineering intern working largely on the ROS2 ecosystem
Figured you would want it in 3rd person.
Brian Chen is a 3rd year undergrad student at the University of Toronto studying Engineering Science with a major in Electrical and Computer Engineering. At school he helps lead aUToronto, UofT&amp;rsquo;s self-driving car team where he tries his best to help a car figure out how to drive themselves in the scary real-life world of roads and intersections filled with pedestrians and inconsistent signage.</description>
    </item>
    
    <item>
      <title>My terminal-centric workflow for ROS 2</title>
      <link>//chenbrian.ca/posts/ros2_terminal_workflow/</link>
      <pubDate>Tue, 04 Jan 2022 04:23:20 -0500</pubDate>
      
      <guid>//chenbrian.ca/posts/ros2_terminal_workflow/</guid>
      <description>This is a work in progress
LSP with clangd ROS2 puts its headers into /opt/ros2/&amp;lt;ROS_DISTRO&amp;gt;/include. This doesn&amp;rsquo;t work out of the box with my fairly default clangd setup, and it would be too easy if it just worked out of the box with vim! Most editors like vscode or clion have their own way of handling scenarios like this, e.g. vscode using a c_cpp_properties.json file.
For vscode setup, see this or this</description>
    </item>
    
  </channel>
</rss>
